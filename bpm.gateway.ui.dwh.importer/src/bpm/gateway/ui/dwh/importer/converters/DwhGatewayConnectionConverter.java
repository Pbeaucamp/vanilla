package bpm.gateway.ui.dwh.importer.converters;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import bpm.gateway.core.Server;
import bpm.gateway.core.server.database.DBColumn;
import bpm.gateway.core.server.database.DBSchema;
import bpm.gateway.core.server.database.DBTable;
import bpm.gateway.core.server.database.DataBaseServer;
import bpm.gateway.core.server.database.dwhview.DwhDbConnection;
import bpm.model.converter.core.IModelConverter;
import bpm.sqldesigner.api.document.DocumentSnapshot;
import bpm.sqldesigner.api.model.LinkForeignKey;
import bpm.sqldesigner.api.model.SchemaNull;

public class DwhGatewayConnectionConverter implements IModelConverter<DocumentSnapshot> {

	private static final String name = "SqlDesigner DwhView to Vanilla MetaData";
	private static final String description = "Create a Vanilla MetaData until the Business Package";
	
	
	public static final String PROP_CONNECTION_NAME = "bpm.gateway.ui.dwh.importer.converters.DwhGatewayConnectionConverter.connectionName";
	public static final String PROP_DATABASE_SERVER = "bpm.gateway.ui.dwh.importer.converters.DwhGatewayConnectionConverter.databaseServer";

	
	private String connectionName;
	private String databaseServerName;
	
	
	public DwhGatewayConnectionConverter() {}

	@Override
	public String getDescription() {
		return description;
	}

	@Override
	public String getName() {
		return name;
	}

	@Override
	public Class<?> getTargetClass() {
		return DwhDbConnection.class;
	}

	

	@Override
	public void configure(Object configurationObject) throws Exception {
		if (!(configurationObject instanceof Map)){
			throw new Exception("A Map is expected to configure the Converter");
		}
		
		Map map = (Map)configurationObject;
		
		try{
			connectionName = (String) map.get(PROP_CONNECTION_NAME);
		}catch(Exception e){
			throw new Exception("Unable to find connection name in configurationObject : " + e.getMessage(), e);
		}
		

		try{
			databaseServerName = (String) map.get(PROP_DATABASE_SERVER);
		}catch(Exception e){
			throw new Exception("Unable to find database server name in configurationObject : " + e.getMessage(), e);
		}
		
		
		
	}
	
	@Override
	public Object convert(DocumentSnapshot dwhView) throws Exception {
		DwhDbConnection conModel = new DwhDbConnection();
		
		
		conModel.setDriverName(dwhView.getDatabaseConnection().getDriverName()); 
		conModel.setHost(dwhView.getDatabaseConnection().getHost()); 
		conModel.setPort(dwhView.getDatabaseConnection().getPort());
		conModel.setDataBaseName(dwhView.getDatabaseConnection().getDataBaseName()); 
		conModel.setLogin(dwhView.getDatabaseConnection().getLogin()); 
		conModel.setPassword(dwhView.getDatabaseConnection().getPassword()); 

		
		/*
		 * add the tables
		 */
		List<LinkForeignKey> foreignKeys = new ArrayList<LinkForeignKey>();
		DBSchema schema = null;
		for(bpm.sqldesigner.api.model.Table table : dwhView.getTables()){
			
			if (schema == null){
				schema = new DBSchema(table.getSchema().getName(), table.getSchema() instanceof SchemaNull);
			}

			DBTable t = new DBTable(schema, table.getName(), "Table");
			
			/*
			 * add the columns
			 */
			for(bpm.sqldesigner.api.model.Column column : table.getColumns().values()){
				DBColumn col = new DBColumn(t, column.getName(), column.getTypeString(), column.isPrimaryKey());
			}
			conModel.setSchema(schema);
		}
				
		conModel.setName(connectionName);
		DataBaseServer server = new DataBaseServer();
		server.setDescription("Autogenerated from a DwhView import");
		server.setName(databaseServerName);
		
		server.addConnection(conModel);
		server.setCurrentConnection(conModel);

		return server;
	}
	
	

}
