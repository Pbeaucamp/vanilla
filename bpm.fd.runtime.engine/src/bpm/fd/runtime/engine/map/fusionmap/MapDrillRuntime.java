package bpm.fd.runtime.engine.map.fusionmap;

import java.net.URLEncoder;


public class MapDrillRuntime {
	private String[] parameterNames;
	private boolean categoryAsValue;

	private String baseLinkUrl;
	
		
	public MapDrillRuntime(String baseUrl, String[] parameterNames, boolean categoryAsValue, String folderPageTarget, String folderParameterName) {
		super();
		this.parameterNames = parameterNames;
		this.categoryAsValue = categoryAsValue;
		

		baseLinkUrl = "" + baseUrl;
		
		if (folderPageTarget != null && folderParameterName != null){
			int i = baseUrl.indexOf("&" + folderParameterName + "=");
			if (i < 0 ){
				baseLinkUrl = baseUrl + "&" + folderParameterName + "=" + folderPageTarget;
			}
			else{
				int e = baseUrl.indexOf("=" , i+ (("&" + folderParameterName + "=").length()));
				if (e != -1){
					baseLinkUrl = baseUrl.substring(0, i) + "&" + folderParameterName + "=" + folderPageTarget + baseUrl.substring(e);
				}
				else{
					baseLinkUrl = baseUrl.substring(0, i) + "&" + folderParameterName + "=" + folderPageTarget;
				}
				
			}
	
		}
		
	}
	/**
	 * @return the parameterNames
	 */
	public String[] getParameterNames() {
		return parameterNames;
	}
	/**
	 * @return the categoryAsValue
	 */
	public boolean isCategoryAsValue() {
		return categoryAsValue;
	}
	
	
	/**
	 * 
	 * @param value
	 * @return
	 * @throws Throwable
	 * @deprecated : link JavaScript is generated by the FusionMapXMlGenerator
	 */
	public String getLink(String value) throws Throwable{

		String s = new String(baseLinkUrl);
		for(String p : parameterNames){
			int i = baseLinkUrl.indexOf("&" + p + "=");
			if (i < 0){
				s = s + "&" + p + "=" + value;
			}
			else{
				int e = baseLinkUrl.indexOf("&", i+ ("&" + p + "=").length());
				if (e < 0){
					s = s.substring(0, i) + "&" + p + "=" +  URLEncoder.encode(value,"UTF-8");
				}
				else{
					s = s.substring(0, i) + "&" + p + "=" + URLEncoder.encode(value,"UTF-8") + s.substring(e);
				}
			}
		}
		

		
		return s;
	}
}
