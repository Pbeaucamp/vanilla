package bpm.faweb.client.projection;

public class Functions {

	//operator
	public static final String OPERATOR_PLUS = "+";
	public static final String OPERATOR_MINUS = "-";
	public static final String OPERATOR_MULTIPLICATION = "*";
	public static final String OPERATOR_DIVIDE = "/";
	public static final String OPERATOR_MOD = "%";
	public static final String OPERATOR_LPAREN = "(";
	public static final String OPERATOR_RPAREN = ")";
	
	public static final String[] OPERATORS = {OPERATOR_PLUS, OPERATOR_MINUS, OPERATOR_MULTIPLICATION, 
		OPERATOR_DIVIDE, OPERATOR_MOD};//, OPERATOR_LPAREN, OPERATOR_RPAREN};
	
	//js functions
	
	public static String[] Js_Functions_Subcat = new String[]{
		"Array"
		,"Boolean"
		,"Date"
		,"Global"
		,"Math"
		,"Number"
		,"Object"
		,"RegExp"
		,"String"
	};
	public static int JS_ARRAY = 0;
	public static int JS_BOOLEAN = 1;
	public static int JS_DATE = 2;
	public static int JS_GLOBAL = 3;
	public static int JS_MATH = 4;
	public static int JS_NUMBER = 5;
	public static int JS_OBJECT = 6;
	public static int JS_REGEXP = 7;
	public static int JS_STRING = 8;
	
	public static String[] JS_ARRAY_FUNCTIONS = new String[]{
		"length:Number"
		,"Array()"
		,"Array(size:Number)"
		,"Array(element:Object,...)"
		,"concat(value:Object,...):Array"
		,"join():String"
		,"join(separator:String):String"
		,"pop():Object"
		,"push(value:String,...):Number"
		,"reverse():void"
		,"shift():Object"
		,"slice(start:Number,end:Number):Array"
		,"sort():Array"
		,"sort(orderfunc:Function):Array"
		,"splice(start:Number,deleteCount:Number,...):Array"
		,"toLocaleString():String"
		,"toString():String"
		,"unshift(value:Object,...):Array"
	};
	
	public static String[] JS_ARRAY_FUNCTIONS_DISPLAY = new String[]{
		"length"
		,"new Array()"
		,"new Array()"
		,"new Array()"
		,"concat()"
		,"join()"
		,"join()"
		,"pop()"
		,"push()"
		,"reverse()"
		,"shift()"
		,"slice()"
		,"sort()"
		,"sort()"
		,"splice()"
		,"toLocaleString()"
		,"toString()"
		,"unshift()"
	};
	
	public static String[] JS_BOOLEAN_FUNCTIONS = new String[]{
		"Boolean(value:Object)"
		,"toString():String"
		,"valueOf():Boolean"
	};
	
	public static String[] JS_BOOLEAN_FUNCTIONS_DISPLAY = new String[]{
		"new Boolean()"
		,"toString()"
		,"valueOf()"
	};
	
	public static String[] JS_DATE_FUNCTIONS = new String[]{
		"Date()"
		,"Date(milliseconds:Number)"
		,"Date(dateString:String)"
		,"Date(year:Number,month:Number,day:Number,hours:Number,minutes:Number,seconds:Number,ms:Number)"
		,"getDate():Number"
		,"getDay():Number"
		,"getFullYear():Number"
		,"getHours():Number"
		,"getMilliseconds():Number"
		,"getMinutes():Number"
		,"getMonth():Number"
		,"getSeconds():Number"
		,"getTime():Number"
		,"getTimezoneOffset():Number"
		,"getUTCDate():Number"
		,"getUTCDay():Number"
		,"getUTCFullYear():Number"
		,"getUTCHours():Number"
		,"getUTCMilliseconds():Number"
		,"getUTCMinutes():Number"
		,"getUTCMonth():Number"
		,"getUTCSeconds():Number"
		,"getYear():Number"
		,"parse(date:String):Number"
		,"setDate(dayofmonth:Number):Number"
		,"setFullYear(year:Number):Number"
		,"setFullYear(year:Number,month:Number):Number"
		,"setFullYear(year:Number,month:Number,day:Number):Number"
		,"setHours(hours:Number):Number"
		,"setHours(hours:Number,minutes:Number):Number"
		,"setHours(hours:Number,minutes:Number,seconds:Number):Number"
		,"setHours(hours:Number,minutes:Number,seconds:Number,millis:Number):Number"
		,"setMilliseconds(millis:Number):Number"
		,"setMinutes(minutes:Number):Number"
		,"setMinutes(minutes:Number,seconds:Number):Number"
		,"setMinutes(minutes:Number,seconds:Number,millis:Number):Number"
		,"setMonth(month:Number):Number"
		,"setMonth(month:Number,day:Number):Number"
		,"setSeconds(seconds:Number):Number"
		,"setSeconds(seconds:Number,millis:Number):Number"
		,"setTime(millis:Number):Number"
		,"setUTCDate(dayofmonth:Number):Number"
		,"setUTCFullYear(year:Number):Number"
		,"setUTCFullYear(year:Number,month:Number):Number"
		,"setUTCFullYear(year:Number,month:Number,day:Number):Number"
		,"setUTCHours(hours:Number):Number"
		,"setUTCHours(hours:Number,minutes:Number):Number"
		,"setUTCHours(hours:Number,minutes:Number,seconds:Number):Number"
		,"setUTCHours(hours:Number,minutes:Number,seconds:Number,millis:Number):Number"
		,"setUTCMilliseconds(millis:Number):Number"
		,"setUTCMinutes(minutes:Number):Number"
		,"setUTCMinutes(minutes:Number,seconds:Number):Number"
		,"setUTCMinutes(minutes:Number,seconds:Number,millis:Number):Number"
		,"setUTCMonth(month:Number):Number"
		,"setUTCMonth(month:Number,day:Number):Number"
		,"setUTCSeconds(seconds:Number):Number"
		,"setUTCSeconds(seconds:Number,millis:Number):Number"
		,"setYear(year:Number):Number"
		,"toDateString():String"
		,"toGMTString():String"
		,"toLocaleDateString():String"
		,"toLocaleString():String"
		,"toLocaleTimeString():String"
		,"toString():String"
		,"toTimeString():String"
		,"toUTCString():String"
		,"UTC(year:Number,month:Number,day:Number,hours:Number,minutes:Number,seconds:Number,ms:Number):Number"
		,"valueOf():Number"
	};
	
	public static String[] JS_DATE_FUNCTIONS_DISPLAY = new String[]{
		"new Date()"
		,"new Date()"
		,"new Date()"
		,"new Date()"
		,"getDate()"
		,"getDay()"
		,"getFullYear()"
		,"getHours()"
		,"getMilliseconds()"
		,"getMinutes"
		,"getMonth()"
		,"getSeconds()"
		,"getTime()"
		,"getTimezoneOffset()"
		,"getUTCDate()"
		,"getUTCDay()"
		,"getUTCFullYear()"
		,"getUTCHours()"
		,"getUTCMilliseconds()"
		,"getUTCMinutes()"
		,"getUTCMonth()"
		,"getUTCSeconds()"
		,"getYear()"
		,"Date.parse()"
		,"setDate()"
		,"setFullYear()"
		,"setFullYear()"
		,"setFullYear()"
		,"setHours()"
		,"setHours()"
		,"setHours()"
		,"setHours()"
		,"setMilliseconds()"
		,"setMinutes()"
		,"setMinutes()"
		,"setMinutes()"
		,"setMonth()"
		,"setMonth()"
		,"setSeconds()"
		,"setSeconds()"
		,"setTime()"
		,"setUTCDate()"
		,"setUTCFullYear()"
		,"setUTCFullYear()"
		,"setUTCFullYear()"
		,"setUTCHours()"
		,"setUTCHours()"
		,"setUTCHours()"
		,"setUTCHours()"
		,"setUTCMilliseconds()"
		,"setUTCMinutes()"
		,"setUTCMinutes()"
		,"setUTCMinutes()"
		,"setUTCMonth()"
		,"setUTCMonth()"
		,"setUTCSeconds()"
		,"setUTCSeconds()"
		,"setYear()"
		,"toDateString()"
		,"toGMTString()"
		,"toLocaleDateString()"
		,"toLocaleString()"
		,"toLocaleTimeString()"
		,"toString()"
		,"toTimeString()"
		,"toUTCString()"
		,"Date.UTC()"
		,"valueOf()"
	};
	
	public static String[] JS_GLOBAL_FUNCTIONS = new String[]{
		"Infinity:Number"
		,"NaN:Object"
		,"undefined:Object"
		,"decodeURI(uri:String):String"
		,"decodeURIComponent(s:String):String"
		,"encodeURI(uri:String):String"
		,"encodeURIComponent(s:String):String"
		,"escape(s:String):String"
		,"eval(code:String):Object"
		,"isFinite(n:Number):Boolean"
		,"isNaN(x:Object):Boolean"
		,"parseFloat(s:String):Number"
		,"parseInt(s:String,radix:Number):Number"
		,"parseInt(s:String):Number"
		,"unescape(s:String):String"
	};
	
	public static String[] JS_GLOBAL_FUNCTIONS_DISPLAY = new String[]{
		"Infinity"
		,"NaN"
		,"undefined"
		,"decodeURI()"
		,"decodeURIComponent()"
		,"encodeURI()"
		,"encodeURIComponent()"
		,"escape()"
		,"eval()"
		,"isFinite()"
		,"isNaN()"
		,"parseFloat()"
		,"parseInt()"
		,"parseInt()"
		,"unescape()"
	};
	
	public static String[] JS_MATH_FUNCTIONS = new String[]{
		"E:Number"
		,"LN10:Number"
		,"LN2:Number"
		,"LOG10E:Number"
		,"LOG2E:Number"
		,"PI:Number"
		,"SQRT1_2:Number"
		,"SQRT2:Number"
		,"abs(x:Number):Number"
		,"acos(x:Number):Number"
		,"asin(x:Number):Number"
		,"atan(x:Number):Number"
		,"atan2(y:Number,x:Number):Number"
		,"ceil(x:Number):Number"
		,"cos(x:Number):Number"
		,"exp(x:Number):Number"
		,"floor(x:Number):Number"
		,"log(x:Number):Number"
		,"max(x:Number):Number"
		,"min(x:Number):Number"
		,"pow(x:Number,y:Number):Number"
		,"random():Number"
		,"round(x:Number):Number"
		,"sin(x:Number):Number"
		,"sqrt(x:Number):Number"
		,"tan(x:Number):Number"
	};
	
	public static String[] JS_MATH_FUNCTIONS_DISPLAY = new String[]{
		"Math.E"
		,"Math.LN10"
		,"Math.LN2"
		,"Math.LOG10E"
		,"Math.LOG2E"
		,"Math.PI"
		,"Math.SQRT1_2"
		,"Math.SQRT2"
		,"Math.abs()"
		,"Math.acos()"
		,"Math.asin()"
		,"Math.atan()"
		,"Math.atan2()"
		,"Math.ceil()"
		,"Math.cos()"
		,"Math.exp()"
		,"Math.floor()"
		,"Math.log()"
		,"Math.max()"
		,"Math.min()"
		,"Math.pow()"
		,"Math.random()"
		,"Math.round()"
		,"Math.sin()"
		,"Math.sqrt()"
		,"Math.tan()"
	};
	
	public static String[] JS_NUMBER_FUNCTIONS = new String[]{
		"MAX_VALUE:Number"
		,"MIN_VALUE:Number"
		,"NaN:Number"
		,"NEGATIVE_INFINITY"
		,"POSITIVE_INFINITY"
		,"Number(value:Object)"
		,"toExponential(digits:Number):String"
		,"toFixed(digits:Number):String"
		,"toLocaleString():String"
		,"toPrecision(precision:Number):String"
		,"toString(radix:Number):String"
		,"valueOf():Number"
	};
	
	public static String[] JS_NUMBER_FUNCTIONS_DISPLAY = new String[]{
		"Number.MAX_VALUE"
		,"Number.MIN_VALUE"
		,"Number.NaN"
		,"Number.NEGATIVE_INFINITY"
		,"Number.POSITIVE_INFINITY"
		,"new Number()"
		,"toExponential()"
		,"toFixed()"
		,"toLocaleString()"
		,"toPrecision()"
		,"toString()"
		,"valueOf()"
	};
	
	public static String[] JS_OBJECT_FUNCTIONS = new String[]{
		"Object()"
		,"Object(value:Object)"
		,"hasOwnProperty(propname:String):Boolean"
		,"isPrototypeOf(o:Object):Boolean"
		,"propertyIsEnumerable(propname:String):Boolean"
		,"toLocaleString():String"
		,"toString():String"
		,"valueOf():Object"
	};
	
	public static String[] JS_OBJECT_FUNCTIONS_DISPLAY = new String[]{
		"new Object()"
		,"new Object()"
		,"hasOwnProperty()"
		,"isPrototypeOf()"
		,"propertyIsEnumerable()"
		,"toLocaleString()"
		,"toString()"
		,"valueOf()"
	};
	
	public static String[] JS_REGEXP_FUNCTIONS = new String[]{
		"global:Boolean"
		,"ignoreCase:Boolean"
		,"lastIndec:Number"
		,"source:String"
		,"RegExp(pattern:String,attributes:String)"
		,"exec(string:String):String[]"
		,"test(string:String):Boolean"
		,"toString():String"
	};
	
	public static String[] JS_REGEXP_FUNCTIONS_DISPLAY = new String[]{
		"global"
		,"ignoreCase"
		,"lastIndex"
		,"source"
		,"new RegExp()"
		,"exec()"
		,"test()"
		,"toString()"
	};
	
	public static String[] JS_STRING_FUNCTIONS = new String[]{
		"length:Number"
		,"String(Object:Object)"
		,"charAt(n:Number):String"
		,"charCodeAt(n:Number):Number"
		,"concat(value:Object,...):String"
		,"fromCharCode(c:Number,...):String"
		,"indexOf(substring:String,start:Number):Number"
		,"indexOf(substring:String):Number"
		,"lastIndexOf(substring:String,start:Number):Number"
		,"lastIndexOf(substring:String):Number"
		,"match(regexp:String):String[]"
		,"replace(regexp:String,replacement:String):String"
		,"search(regexp:String):String"
		,"slice(start:Number,end:Number):String"
		,"split(delimitor:String,limit:Number):String[]"
		,"substr(start:Number,length:Number):String"
		,"substring(from:Number,to:Number):String"
		,"toLocaleLowerCase():String"
		,"toLocaleUpperCase():String"
		,"toLowerCase():String"
		,"toString():String"
		,"toUpperCase():String"
		,"valueOf()"
	};
	
	public static String[] JS_STRING_FUNCTIONS_DISPLAY = new String[]{
		"length"
		,"new String()"
		,"charAt()"
		,"charCodeAt()"
		,"concat()"
		,"String.fromCharCode()"
		,"indexOf()"
		,"indexOf()"
		,"lastIndexOf()"
		,"lastIndexOf()"
		,"match()"
		,"replace()"
		,"search()"
		,"slice()"
		,"split()"
		,"substr()"
		,"substring()"
		,"toLocaleLowerCase()"
		,"toLocaleUpperCase()"
		,"toLowerCase()"
		,"toString()"
		,"toUpperCase()"
		,"valueOf()"
	};
	
	public static String[][] JS_FUNCTIONS_LABELS = {JS_ARRAY_FUNCTIONS, JS_BOOLEAN_FUNCTIONS, JS_DATE_FUNCTIONS, JS_GLOBAL_FUNCTIONS, JS_MATH_FUNCTIONS, JS_NUMBER_FUNCTIONS, JS_OBJECT_FUNCTIONS, JS_REGEXP_FUNCTIONS, JS_STRING_FUNCTIONS};
	public static String[][] JS_FUNCTIONS_VALUES = {JS_ARRAY_FUNCTIONS_DISPLAY, JS_BOOLEAN_FUNCTIONS_DISPLAY, JS_DATE_FUNCTIONS_DISPLAY, JS_GLOBAL_FUNCTIONS_DISPLAY, JS_MATH_FUNCTIONS_DISPLAY, JS_NUMBER_FUNCTIONS_DISPLAY, JS_OBJECT_FUNCTIONS_DISPLAY, JS_REGEXP_FUNCTIONS_DISPLAY, JS_STRING_FUNCTIONS_DISPLAY};

}
